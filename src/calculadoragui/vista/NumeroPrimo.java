/*
 * Copyright 2013 Antonio López Marín
 * CalculadoraGUI 3.4
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package calculadoragui.vista;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 * Clase que muestra la vista que calcula la posicion de los numeros primos.
 *
 * Utiliza el SwingWorker<T,T> para calcular en segundo plano la posicion de un
 * numero primo.
 *
 * @see SwingWorker
 * @author Antonio López Marín
 */
public class NumeroPrimo extends javax.swing.JFrame
        implements PropertyChangeListener {

    /**
     * Creates new form NumeroPrimo
     */
    public NumeroPrimo() {
        initComponents();
        configuracion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loadingLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancelar = new javax.swing.JButton();
        estadoLabel = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        calcularBtn = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        posInfoLabel = new javax.swing.JLabel();
        sliderSpeed = new javax.swing.JSlider();
        jScrollPane2 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.GRAY));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(293, 23));

        loadingLabel.setText("      ");
        loadingLabel.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 0, Color.GRAY));

        progressBar.setAlignmentY(5.0F);
        progressBar.setPreferredSize(new java.awt.Dimension(150, 14));

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/cancelar.png"))); // NOI18N
        cancelar.setText("jButton1");
        cancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(estadoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(estadoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(loadingLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        calcularBtn.setText("Calcular");

        infoLabel.setText("¿Cual es el numero primo que esta en la novena posición?");

        posInfoLabel.setText("Posición");

        jScrollPane2.setViewportView(textPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(posInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(calcularBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(infoLabel)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(infoLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcularBtn)
                    .addComponent(posInfoLabel))
                .addGap(18, 18, 18)
                .addComponent(sliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
    }//GEN-LAST:event_cancelarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcularBtn;
    private javax.swing.JButton cancelar;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JLabel posInfoLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JSlider sliderSpeed;
    private javax.swing.JSpinner spinner;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
    private Document document;
    private SimpleAttributeSet atributos;
    private WorkerTask worker;
    private int sec = 0;

    /**
     * Metodo de configuracion de la ventana.
     */
    private void configuracion() {
        setTitle("Numeros primos");
        setResizable(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setLocation(750, 320);

        String tooltipPos = "Posicion del numero primo que quieres encontrar";
        //Pongo el tooltip a la etiqueta posicion, que sepan que es
        posInfoLabel.setToolTipText(tooltipPos);
        infoLabel.setToolTipText("Se dice que un número primo es un número natural "
                + "mayor que 1 <br>que tiene únicamente dos divisores "
                + "distintos: él mismo y el 1.");
        //Instancio los atributos del textPane y recojo el documento
        atributos = new SimpleAttributeSet();
        document = textPane.getDocument();

        //El area de texto no se puede editar, es solo para informar
        textPane.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        textPane.setEditable(false);
        textPane.setBackground(Color.LIGHT_GRAY);

        //Le pongo una fuente mas pequeña a la etiqueta que me dice el estado
        estadoLabel.setFont(new Font(null, Font.PLAIN, 11));

        //Configuro la barra de progreso
        progressBar.setMinimum(0);
        progressBar.setMaximum(100);
        progressBar.setStringPainted(true);
        progressBar.setVisible(false);

        //Le pongo el modelo al spinner
        SpinnerNumberModel modelo = new SpinnerNumberModel(1, 1, 80000, 1);
        spinner.setModel(modelo);
        spinner.setToolTipText(tooltipPos);

        //Slider
        sliderSpeed.setToolTipText("Velocidad de calculo.");
        sliderSpeed.setMinimum(0);                         //Valor minimo
        sliderSpeed.setMaximum(10);                        //Valor maximo
        sliderSpeed.setValue(5);                           //Valor inicial
        sliderSpeed.setMajorTickSpacing(1);                //Que suba de uno en uno
        sliderSpeed.setMinorTickSpacing(1);                //Que baje de uno en uno
        Hashtable<Integer, JLabel> values = new Hashtable<>();
        values.put(0, new JLabel("Fast"));                 //0 es Fast
        values.put(5, new JLabel("Normal"));               //5 es normal
        values.put(10, new JLabel("Slow"));                //10 es slow
        sliderSpeed.setLabelTable(values);                 //Añado los valores
        sliderSpeed.setPaintTicks(true);                   //Que se pinten las rallas
        sliderSpeed.setPaintLabels(true);                  //Ver las etiquetas
        sliderSpeed.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider source = (JSlider) e.getSource();

                if (source.getValueIsAdjusting()) {
                    if (worker != null) {
                        int fps = (int) source.getValue();
                        worker.setSpeed(fps);
                    }
                } else {
                    Toolkit.getDefaultToolkit().beep();
                }
            }
        });

        //El boton de cancelar el calculo
        cancelar.setVisible(false);
        cancelar.setToolTipText("Detener calculo.");
        cancelar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cancelarOperacion(); //Que cancele
            }
        });

        //El acctionListner del boton calcular
        calcularBtn.setToolTipText("Pulsa para empezar a calcular");
        calcularBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calcular(); //Inicio a calcular
            }
        });
        
        //Añado el windowsListener para cuando quieran cerrar la ventana
        //Si se esta calculando, pregunte si deseas cancelar la ejecución
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                //Si el boton esta desactivado, es que se esta calculando
                if (!calcularBtn.isEnabled()) {
                    //Si cancelo la operacion, quito la ventana
                    if (cancelarOperacion()) {
                        setVisible(false);
                    }
                }else{
                   setVisible(false);
                }
            }
        });
    }

    /**
     * Metodo que cancela la operacion.
     * 
     * @return True si se cancelo la operacion, sino false
     */
    private boolean cancelarOperacion() {
        boolean salida = false;
        int exit = JOptionPane.showConfirmDialog(getContentPane(),
                "¿Seguro que desea cancelar la operación?", "¿Seguro?",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        //Si desea cancelar..
        if (exit == JOptionPane.YES_OPTION) {
            try {
                //Si el worker esta started, cancela y lanza excepción
                //Si ya finalizo el worker, no salta la excepción
                worker.cancel(true);  //Cancela el worker
            } catch (CancellationException ce) {
                try {
                    //Pongo color verde
                    StyleConstants.setForeground(atributos, Color.red); 
                    //Informo en el textarea
                    document.insertString(document.getLength(),
                            "\nGENERACIÓN INTERRRUMPIDA "
                            + "(total time: " + sec + " seconds) ", atributos); 
                    calcularBtn.setEnabled(true);   //Pongo el boton
                    worker.progresoCero();          //Pongo la barra a 0
                    loadingLabel.setText("     ");  //Relleno la etiqueta
                    progressBar.setVisible(false);  //No muestro la barra
                    cancelar.setVisible(false);     //No muestro el boton
                    estadoLabel.setText("Operacion cancelada");
                } catch (BadLocationException ex) {
                    Logger.getLogger(NumeroPrimo.class.getName())
                            .log(Level.WARNING, null, ex);
                }
            }
            salida = true;
        }
        
        return salida;
    }
    
    /**
     * Metodo que comienza a calcular, la posicion de un numero primo.
     * 
     */
    public void calcular() {
        //Pongo el area de texto vacia
        textPane.setText("");
        try {
            StyleConstants.setForeground(atributos, Color.gray);
            document.insertString(document.getLength(), "run:\n", atributos);
        } catch (BadLocationException ex) {
            Logger.getLogger(NumeroPrimo.class.getName())
                    .log(Level.WARNING, null, ex);
        }
        sec = 0;    //Empieza a contar
        //No dejo que puedan pulsar el boton a mitad de la operacion
        calcularBtn.setEnabled(false);

        //Para que en el cursor aparezca un progreso
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        //Creo el worker y lo ejecuto
        worker = new WorkerTask((int) spinner.getValue());
        worker.addPropertyChangeListener(NumeroPrimo.this);
        worker.execute();

        //Despues de empezar a ejecutaro informo de la ejecucion
        progressBar.setVisible(true);
        cancelar.setVisible(true);
        estadoLabel.setText("Calculando numero primo(run)");
        loadingLabel.setText(" ");
        
         //Inicio un cronometro que cuente los segundos que tarda en calcular
        iniciarCronometro();
    }
    
    /**
     * Cronometro que va contando los segundos de ejecución.
     * 
     */
    public void iniciarCronometro(){
       
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (!worker.isDone() && !worker.isCancelled()) {
                    try {
                        Thread.sleep(1000);
                        sec++;
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NumeroPrimo.class.getName())
                                .log(Level.WARNING, null, ex);
                    }
                }
            }
        }).start();
    }

    /**
     * Cuando cambia la barra de progreso, lo notifico a la vista.
     *
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("progress")) {
            progressBar.setValue((int) evt.getNewValue());
        }
    }

    /**
     * Clase que extiende de SwingWorker y devuelve numeros enteros, y calcula
     * en que posicion esta un numero primo.
     *
     */
    public class WorkerTask extends SwingWorker<Integer, Integer> {
        //Posicion

        private int posicion;
        //Contador de numeros primos
        private int cont = 0;
        //Rapidez 
        private int speed = sliderSpeed.getValue();

        /**
         * Constructor que recibe por parametros la posicion de un numero primo.
         *
         * @param pos
         */
        public WorkerTask(int pos) {
            this.posicion = pos;
        }

        /**
         * Para poner el progreso, a 0%
         */
        public void progresoCero() {
            setProgress(0);
        }

        /**
         * Devuelve el numero de primos encontrados.
         *
         * @return
         */
        public int getCont() {
            return cont;
        }

        /**
         * Cuando termina el proceso pone el resultado, y realiza los cambios a
         * la vista que sean encesarios.
         *
         */
        @Override
        protected void done() {
            try {
                //Hace el sonido de que termino
                Toolkit.getDefaultToolkit().beep();
                //Quito el progreso del cursor
                setCursor(null);
                calcularBtn.setEnabled(true);   //Pongo el boton enable
                //Pongo color verde
                StyleConstants.setForeground(atributos, new Color(0, 153, 0));
                document.insertString(document.getLength(),
                        "\nEl numero primo que esta en la posicion "
                        + posicion + " es: " + get(), null);
                document.insertString(document.getLength(),
                        "\nGENERACIÓN CORRECTA (total time: " + sec + " seconds)", atributos);
                cancelar.setVisible(false);     //No muestro el boton
                estadoLabel.setText("Termino la operacion");
            } catch (InterruptedException | ExecutionException | BadLocationException ex) {
                Logger.getLogger(NumeroPrimo.class.getName())
                        .log(Level.WARNING, null, ex);
            }
        }

        /**
         * Metodo que recibe una lista de notificaciones de los numeros primos
         * que hay desde el primero hasta el numero que el usuario indico.
         *
         * @param chunks
         */
        @Override
        protected void process(List<Integer> chunks) {
            if (!isCancelled()) {
                for (Integer primo : chunks) {
                    try {
                        document.insertString(document.getLength(),
                                "> " + primo + " Es numero primo!\n", null);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(NumeroPrimo.class.getName())
                                .log(Level.WARNING, null, ex);
                    }
                }
            }
        }

        /**
         * Metodo que se ejecuta en segundo plano, y calcula la posicion de un
         * numero primo.
         *
         * @return
         * @throws Exception
         */
        @Override
        protected Integer doInBackground() throws Exception {
            int primo = 1;

            //Mientras la posicion indicada sea distinta de contador..
            while (posicion != cont) {
                primo++;                 //Siguiente numero
                if (esPrimo(primo)) {
                    Thread.sleep(speed); //Duerme el tiempo que quiera el usuario
                    publish(primo);      //Publico el numero primo
                    cont++;              //Cuento el numero de primos que llevo

                    //Calculo lo que falta para el final
                    int progreso = (cont * 100) / posicion;
                    //Si el progreso es 0 le digo que ponga 1, para que no se vea
                    //el 100% anterior si lo hubo
                    setProgress(progreso == 0 ? 1 : progreso);
                }
            }
            //Termino
            setProgress(100);
            return primo;
        }

        /**
         * Metodo que modifica la rapidez de calculo.
         *
         * @param sleep
         */
        public void setSpeed(int sleep) {
            this.speed = sleep;
        }

        /**
         * Metodo que calcula si un numero es primo o no.
         *
         * @param numero
         * @return true si es primo, false si no lo es
         */
        public boolean esPrimo(int numero) {
            int contador = 2;
            boolean primo = true;
            //Recorre un numero primo y todos los numeros hasta que sea igual a el
            while ((primo) && (contador != numero)) {
                if (numero % contador == 0) {
                    primo = false;
                }
                contador++;
            }
            return primo;
        }
    }
}